//----------------------------------------------------------------------------// Atlas CSS// 2010 - Arnau March <arnau@arnaumarch.com> modification of://// Atlas Maker // 2009 - Richard Dare <richardjdare@googlemail.com> richardjdare.com//// A Photoshop script to generate texture atlases from a directory// of image files. It will optionly output a text file "AtlasInfo.txt"// containing user definable information about each image.//// This script uses RectanglePacker.js, written by Iván Montes//////  This program is free software: you can redistribute it and/or modify//  it under the terms of the GNU General Public License as published by//  the Free Software Foundation, either version 2 of the License, or//  (at your option) any later version.//  //  This program is distributed in the hope that it will be useful,//  but WITHOUT ANY WARRANTY; without even the implied warranty of//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the//  GNU General Public License for more details.//  //  You should have received a copy of the GNU General Public License//  along with this program.  If not, see <http://www.gnu.org/licenses/>.//// CHANGES// v0.3 - 04/10/2009 - AtlasMaker now compensates for the fact that //   photoshop trims empty pixels from selections. - rjd//// v0.2 - 24/09/2009 - fixed a stupid bug that stopped file export working//    reported by Senthan via blog//----------------------------------------------------------------------------#include "RectanglePacker.js"var defaultRulerUnits = preferences.rulerUnits;preferences.rulerUnits = Units.PIXELS;var Version = "0.1";var srcFolder = new Folder();var numSrcFiles =0;var gotSrcInfo = false;var numPages = 0;// default document sizesvar docWidth = 1024;var docHeight = 512;// pixel margin around each imagevar docMargin =0;// datafile exportvar exportFileName = "sprite.css";//var lineTemplate = "I am image number #i,  and I live at #x,#y, on page #p I am #width wide, and #height high , my filename is #filename";var lineTemplate = ".#filename { background-position:  -#xpx -#ypx; height: #heightpx; width: #widthpx; }";//----------------------------------------------------------------------------// looks like ps javascript has no filter function...//----------------------------------------------------------------------------if(!Array.prototype.filter){  Array.prototype.filter = function(fun /*, thisp*/)  {    var len = this.length;    if (typeof fun != "function")      throw new TypeError();    var res = new Array();    var thisp = arguments[1];    for (var i = 0; i < len; i++)    {      if (i in this)      {        var val = this[i]; // in case fun mutates this        if (fun.call(thisp, val, i, this))          res.push(val);      }    }    return res;  };}//----------------------------------------------------------------------------// ImageInfo - stores information for each source image//----------------------------------------------------------------------------function ImageInfo(file,width,height){	this.file = file;	this.path = path;	this.width = width;	this.height = height;		this.posX = NaN;	this.posY = NaN;	this.hasAtlasPosition = false;	this.pageNum = 0;}var sourceFiles=[];//----------------------------------------------------------------------------// set up gui//----------------------------------------------------------------------------var myDialog = new Window('dialog', 'Atlas Css v'+Version);myDialog.alignChildren = "fill";myDialog.srcDirPanel = myDialog.add('panel',undefined,'Source Directory');myDialog.srcDirPanel.getDirGrp = myDialog.srcDirPanel.add('group');myDialog.srcDirPanel.getDirGrp.orientation = "row";myDialog.srcDirPanel.getDirGrp.srcDirTxt = myDialog.srcDirPanel.getDirGrp.add('edittext',undefined,'');myDialog.srcDirPanel.getDirGrp.srcDirTxt.preferredSize = [300,25];myDialog.srcDirPanel.getDirGrp.srcDirTxt.onChange = onSrcDirTxtChange;myDialog.srcDirPanel.getDirGrp.srcDirBtn = myDialog.srcDirPanel.getDirGrp.add('button',undefined,"Browse...");myDialog.srcDirPanel.getDirGrp.srcDirBtn.onClick = onSrcDirBtnClick;myDialog.srcDirPanel.srcInfoGrp = myDialog.srcDirPanel.add('group');myDialog.srcDirPanel.srcInfoGrp.orientation = "column";myDialog.srcDirPanel.srcInfoGrp.alignment = "left";myDialog.srcDirPanel.srcInfoGrp.numFilesTxt = myDialog.srcDirPanel.srcInfoGrp.add('statictext',undefined,"Number of Files:");myDialog.srcDirPanel.srcInfoGrp.numFilesTxt.preferredSize = [200,20];//----------------------------------------------------------------------------// document panel//----------------------------------------------------------------------------myDialog.docPanel = myDialog.add('panel',undefined,'Document');myDialog.docPanel.orientation = "row";myDialog.docPanel.docSizeGrp = myDialog.docPanel.add('group');myDialog.docPanel.docSizeGrp.orientation = "column";myDialog.docPanel.docSizeGrp.alignment = "left";myDialog.docPanel.docSizeGrp.widthGrp = myDialog.docPanel.docSizeGrp.add('group');myDialog.docPanel.docSizeGrp.widthGrp.orientation = "row";myDialog.docPanel.docSizeGrp.widthGrp.alignment = "right";myDialog.docPanel.docSizeGrp.widthGrp.docWidthTxt = myDialog.docPanel.docSizeGrp.widthGrp.add('statictext',undefined,"Width:");myDialog.docPanel.docSizeGrp.widthGrp.widthEdit = myDialog.docPanel.docSizeGrp.widthGrp.add('edittext',undefined,docWidth);myDialog.docPanel.docSizeGrp.widthGrp.widthEdit.preferredSize = [50,25];myDialog.docPanel.docSizeGrp.widthGrp.widthEdit.onChange = onDocDimensionsChange;myDialog.docPanel.docSizeGrp.heightGrp = myDialog.docPanel.docSizeGrp.add('group');myDialog.docPanel.docSizeGrp.heightGrp.orientation = "row";myDialog.docPanel.docSizeGrp.heightGrp.alignment = "right";myDialog.docPanel.docSizeGrp.heightGrp.docWidthTxt = myDialog.docPanel.docSizeGrp.heightGrp.add('statictext',undefined,"Height:");myDialog.docPanel.docSizeGrp.heightGrp.heightEdit = myDialog.docPanel.docSizeGrp.heightGrp.add('edittext',undefined,docHeight);myDialog.docPanel.docSizeGrp.heightGrp.heightEdit.preferredSize = [50,25];myDialog.docPanel.docSizeGrp.heightGrp.heightEdit.onChange = onDocDimensionsChange;myDialog.docPanel.docSizeGrp.marginGrp = myDialog.docPanel.docSizeGrp.add('group');myDialog.docPanel.docSizeGrp.marginGrp.orientation = "row";myDialog.docPanel.docSizeGrp.marginGrp.alignment = "right";myDialog.docPanel.docSizeGrp.marginGrp.marginTxt = myDialog.docPanel.docSizeGrp.marginGrp.add('statictext',undefined,"Margin:");myDialog.docPanel.docSizeGrp.marginGrp.marginEdit = myDialog.docPanel.docSizeGrp.marginGrp.add('edittext',undefined,docMargin);myDialog.docPanel.docSizeGrp.marginGrp.marginEdit.preferredSize = [50,25];myDialog.docPanel.docSizeGrp.marginGrp.marginEdit.onChange = onDocDimensionsChange;myDialog.docPanel.docInfoGrp = myDialog.docPanel.add('group');myDialog.docPanel.docInfoGrp.orientation = "column";myDialog.docPanel.docInfoGrp.alignment = "left";myDialog.docPanel.docInfoGrp.rowcolGrp = myDialog.docPanel.docInfoGrp.add('group');myDialog.docPanel.docInfoGrp.rowcolGrp.orientation = "column";myDialog.docPanel.docInfoGrp.pageGrp = myDialog.docPanel.add('group');myDialog.docPanel.docInfoGrp.pageGrp.orientation = "column";myDialog.docPanel.docInfoGrp.pageGrp.alignment = "left";myDialog.docPanel.docInfoGrp.pageGrp.pagesTxt  = myDialog.docPanel.docInfoGrp.pageGrp.add('statictext',undefined,"Pages Needed:");myDialog.docPanel.docInfoGrp.pageGrp.pagesTxt.preferredSize = [200,20];//----------------------------------------------------------------------------// datafile export//----------------------------------------------------------------------------myDialog.dataPanel = myDialog.add('panel',undefined,'Datafile Export');myDialog.dataPanel.checkbxGrp = myDialog.dataPanel.add('group');myDialog.dataPanel.checkbxGrp.orientation = "row";myDialog.dataPanel.checkbxGrp.alignment="left";myDialog.dataPanel.checkbxGrp.dataStrCheck = myDialog.dataPanel.checkbxGrp.add('checkbox',undefined,'Enable datafile export');myDialog.dataPanel.checkbxGrp.dataStrCheck.onClick = function(){myDialog.dataPanel.dataStrGrp.dataStr.enabled = myDialog.dataPanel.checkbxGrp.dataStrCheck.value;};myDialog.dataPanel.checkbxGrp.dataStrCheck.value = false;myDialog.dataPanel.dataStrGrp = myDialog.dataPanel.add('group');myDialog.dataPanel.dataStrGrp.orientation = "column";myDialog.dataPanel.dataStrGrp.alignment="left";myDialog.dataPanel.dataStrGrp.dataStrTxt = myDialog.dataPanel.dataStrGrp.add('statictext',undefined,"line template for each image");myDialog.dataPanel.dataStrGrp.dataStrTxt.alignment="left";myDialog.dataPanel.dataStrGrp.dataStr = myDialog.dataPanel.dataStrGrp.add('edittext',undefined,lineTemplate);myDialog.dataPanel.dataStrGrp.dataStr.preferredSize = [390,25];myDialog.dataPanel.dataStrGrp.dataStr.enabled = false;myDialog.dataPanel.dataStrGrp.dataStr.onChange = onDataStrChange;//----------------------------------------------------------------------------// system buttons//----------------------------------------------------------------------------myDialog.systemGrp = myDialog.add('group');myDialog.systemGrp.orientation = "row";myDialog.systemGrp.alignment="right";myDialog.systemGrp.aboutButton = myDialog.systemGrp.add('button',undefined,"About");myDialog.systemGrp.aboutButton.onClick = onAboutButtonClick;myDialog.systemGrp.okButton = myDialog.systemGrp.add('button',undefined,"Ok");myDialog.systemGrp.okButton.onClick = onOkButtonClick;myDialog.systemGrp.okButton.alignment="right";myDialog.systemGrp.cancelButton = myDialog.systemGrp.add('button',undefined,"Cancel");myDialog.systemGrp.cancelButton.onClick = function() {close(); };myDialog.systemGrp.okButton.alignment="right";//----------------------------------------------------------------------------// display dialog, do stuff, then close//----------------------------------------------------------------------------myDialog.center();myDialog.show();close();function close(){ 	preferences.rulerUnits = defaultRulerUnits;	myDialog.close();}//----------------------------------------------------------------------------// ProcessSrcDirectory() -//----------------------------------------------------------------------------function ProcessSrcDirectory(){	//rjd: this prevents the script from dying with files ps doesnt	// recognise. Add your own filetype if it aint here	var files = srcFolder.getFiles(/\.(jpg|tif|psd|png|gif|bmp)$/i);	if(files ==null || files.length ==0)		return false;	sourceFiles = [];	//rjd: TODO: put up some kind of notice/progress bar here...	// get size info from source files and store it for later.	for(var i=0;i<files.length;i++)	{		if(files[i] instanceof File)		{			var doc = open(files[i]);			if(doc !=null)			{				//rjd: the doc sizes are of the form "n px". We need to change em to plain old int				//or the rectanglepacker will die				var widthStr = doc.width.toString();				var heightStr= doc.height.toString();								widthStr = widthStr.substring(0,widthStr.indexOf(" px"));				heightStr = heightStr.substring(0,heightStr.indexOf(" px"));				var width = parseInt(widthStr);				var height= parseInt(heightStr);				sourceFiles[sourceFiles.length] = new ImageInfo(files[i],width,height);				doc.close(SaveOptions.DONOTSAVECHANGES);				numSrcFiles++;			}		}	}	myDialog.srcDirPanel.srcInfoGrp.numFilesTxt.text = "Number of Files: "+numSrcFiles;	return true;}//----------------------------------------------------------------------------// onSrcDirBtnClick//----------------------------------------------------------------------------function onSrcDirBtnClick(){	srcFolder = Folder.selectDialog("Select Src Directory");	if(srcFolder !=null)	{		myDialog.srcDirPanel.getDirGrp.srcDirTxt.text = srcFolder.fsName;		gotSrcInfo = ProcessSrcDirectory();		onDocDimensionsChange();	}}//----------------------------------------------------------------------------// onSrcDirTxtChange//----------------------------------------------------------------------------function onSrcDirTxtChange(){	//alert ("changing text");	// make sure its a valid directory	}//----------------------------------------------------------------------------// onDocDimensionsChange//----------------------------------------------------------------------------function onDocDimensionsChange(){	var width = myDialog.docPanel.docSizeGrp.widthGrp.widthEdit.text;	var height= myDialog.docPanel.docSizeGrp.heightGrp.heightEdit.text;	var margin= myDialog.docPanel.docSizeGrp.marginGrp.marginEdit.text;	//validate dimensions	 if( ! /^-?\d+$/.test(width))	 {	 	alert("invalid width");	 	return;	 }	 if( ! /^-?\d+$/.test(height))	 {	 	alert("invalid height");	 	return;	 }	 if( ! /^-?\d+$/.test(margin))	 {	 	alert("invalid margin");	 	return;	 }	 	docWidth = parseInt(width);	docHeight = parseInt(height);	docMargin = parseInt(margin);	if(gotSrcInfo)	{		myDialog.docPanel.docInfoGrp.pageGrp.pagesTxt.text = "CALCULATING ATLAS...";		ResetImages();		var imagesLeftToFit = sourceFiles.length;		var page=0;		while(imagesLeftToFit>0)		{				imagesLeftToFit = CalcAtlas(page++);		}		//TestPrint();		myDialog.docPanel.docInfoGrp.pageGrp.pagesTxt.text = "Pages needed: "+page;		numPages = page;	}}//----------------------------------------------------------------------------// CalcAtlas()//----------------------------------------------------------------------------function CalcAtlas(currentPage){		var nofit = 0;	var packer = new NETXUS.RectanglePacker(docWidth, docHeight);			for(var i=0;i<sourceFiles.length;i++)	{		var coords;		var sourceImage = sourceFiles[i];		if(!sourceImage.hasAtlasPosition)		{			// find out where to put the image...			coords = packer.findCoords(sourceImage.width+docMargin,sourceImage.height+docMargin);			if(coords)			{				sourceImage.posX = coords.x;				sourceImage.posY = coords.y;				sourceImage.hasAtlasPosition=true;				sourceImage.page = currentPage;			}			else			{				nofit++;			}		}	}	return nofit;}//----------------------------------------------------------------------------// ResetImages - clear position+page info from our images//----------------------------------------------------------------------------function ResetImages(){	for(var i=0;i<sourceFiles.length;i++)	{		sourceFiles[i].posX = NaN;		sourceFiles[i].posY = NaN;		sourceFiles[i].hasAtlasPosition=false;		sourceFiles[i].page = 0;	}}//----------------------------------------------------------------------------// onOkButtonClick//----------------------------------------------------------------------------function onOkButtonClick(){	if(gotSrcInfo)	{		MakeAtlasSheets();		if(myDialog.dataPanel.checkbxGrp.dataStrCheck.value)			createExportFile();		close();	}	else		alert("Please select a valid source directory");}//----------------------------------------------------------------------------// MakeAtlasSheets//----------------------------------------------------------------------------function MakeAtlasSheets(){	for(var i=0;i<numPages;i++)	{		// use filter to get images that belong on the current page		var sourceImgs = sourceFiles.filter(function(x){if(x.page==i)return true;});		var currentPage = documents.add(docWidth, docHeight, 72.0, "AtlasSheet#"+i,NewDocumentMode.RGB, DocumentFill.TRANSPARENT);				for(var j=0;j<sourceImgs.length;j++)		{			var imgInfo = sourceImgs[j];			var srcImg  = open(imgInfo.file);			app.activeDocument = srcImg;						//rjd: this try block checks for empty frames.			//make sure to check "dont break on exceptions" in debug menu of extendscript toolkit			var ignoreFlag = false;			try			{				srcImg.selection.selectAll();				srcImg.selection.copy();			}			catch(e)			{				ignoreFlag = true;			}			if(!ignoreFlag)			{				// paste the sprite in the new page, then move it				app.activeDocument = currentPage;				var layerRef = currentPage.paste();								// rjd: if the image contains empty pixels, photoshop will not select them				// and the selection will be smaller than the src image.				// if this happens, we fix it here...				var srcWidth = ConvertPxToInt(srcImg.width);				var srcHeight= ConvertPxToInt(srcImg.height);								var destWidth = layerRef.bounds[2] - layerRef.bounds[0];				var destHeight = layerRef.bounds[3] - layerRef.bounds[1];					var nudgeX = 0;				var nudgeY = 0;				if(destWidth <srcWidth)					nudgeX =(srcWidth-destWidth)/2;				if(destHeight<srcHeight)					nudgeY =(srcHeight-destHeight)/2;				// translate to origin,then to new position				layerRef.translate(-layerRef.bounds[0],-layerRef.bounds[1]);				layerRef.translate(imgInfo.posX+Math.ceil(Math.abs(nudgeX)),imgInfo.posY+Math.ceil(Math.abs(nudgeY)));			}			srcImg.close(SaveOptions.DONOTSAVECHANGES);		}	}}//----------------------------------------------------------------------------// createExportFile()//----------------------------------------------------------------------------function createExportFile(){	// create export file in src dir	var exportFile = new File(srcFolder.absoluteURI+"/"+exportFileName);	exportFile.open("w");	for(var i=0;i<sourceFiles.length;i++)	{		var a = sourceFiles[i];		var posx = a.posX + docMargin;		var posy = a.posY + docMargin;		var posx = posx.toString();		var posy = posy.toString();				var width= a.width.toString();		var height= a.height.toString();		var page = a.page;		var exportLine = myDialog.dataPanel.dataStrGrp.dataStr.text;		exportLine = exportLine.replace(/#filename/,a.file.name.replace(/\..*$/,''));		exportLine = exportLine.replace(/#i/,i);		exportLine = exportLine.replace(/#x/,posx);		exportLine = exportLine.replace(/#y/,posy);		exportLine = exportLine.replace(/#width/,width);		exportLine = exportLine.replace(/#height/,height);		exportLine = exportLine.replace(/#p/,page);		exportFile.writeln(exportLine);	}	exportFile.close();}//----------------------------------------------------------------------------// onDataStrChange//----------------------------------------------------------------------------function onDataStrChange(){	//rjd: do we need to perform validation on anything here?}//----------------------------------------------------------------------------// onAboutButtonClick//----------------------------------------------------------------------------function onAboutButtonClick(){	var aboutWin = new Window('dialog',"About AtlasMaker");	aboutWin.preferredSize = [300,400];	aboutWin.location = {x:200,y:150};	var aboutText = "Atlas Maker v"+Version+"\n\n";	aboutText+="2009 Richard Dare - richardjdare@googlemail.com\n";	aboutText+="Uses RectanglePacker.js by Iván Montes <drslump@drslump.biz>\n\n";	aboutText+="This script creates texture atlases from a directory of image files.\n";	aboutText+="Just select a source directory, enter the size of the destination document and click ok.\n\n";	aboutText+="Using the Datafile Export option\n\n";	aboutText+="AtlasMaker can optionally export a text file containing information about each image. This file is named \"AtlasInfo.txt\" and saved in the source directory.\n";	aboutText+="Each line of this file is generated from the text entered into the \"line template\" box.\n";	aboutText+="You can instruct AtlasMaker to insert information about each Image by using the following tags:\n\n";	aboutText+="#filename - the filename of the image\n";	aboutText+="#i        - the index number of the  image.\n"	aboutText+="#p        - The page the image is on."	aboutText+="#x        - the x position of the image on the destination document\n";	aboutText+="#y        - the y position of the image on the destination document\n";	aboutText+="#width    - the width of the image\n";	aboutText+="#height   - the height of the image\n\n";		aboutWin.aboutTxt = aboutWin.add('statictext',undefined,aboutText,{multiline:true,scrolling:true});	aboutWin.okButton = aboutWin.add('button',undefined,"Ok");	aboutWin.okButton.onClick = function(){aboutWin.close()};	aboutWin.okButton.alignment = "center";	aboutWin.show();}//----------------------------------------------------------------------------// ConvertPxToInt() - photoshop often returns sizes as " nn px". this // function turns them into plain old int//----------------------------------------------------------------------------function ConvertPxToInt(input){	var inpStr = input.toString();	inpStr = inpStr.substring(0,inpStr.indexOf(" px"));	var retVal= parseInt(inpStr);		return retVal;}//----------------------------------------------------------------------------// TestPrint()//----------------------------------------------------------------------------function TestPrint(){	// testing - lets print em up	for(var i=0;i<sourceFiles.length;i++)	{		var v = sourceFiles[i];		$.writeln("file "+i+", "+": x:"+v.posX+",y:"+v.posY+",hasAtlasPosition: "+v.hasAtlasPosition+",page:"+v.page);	}}